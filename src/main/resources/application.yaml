server:
  port: 8080
  shutdown: graceful
  error:
    whitelabel:
      enabled: false

spring:
  main:
    banner-mode: 'off'
  profiles:
    active: default
  application:
    name: infotoast
  # Valkey/Redis configuration for production
  data:
    redis:
      host: ${VALKEY_HOST:localhost}
      port: ${VALKEY_PORT:6379}
      password: ${VALKEY_PASSWORD:}
      ssl:
        enabled: ${VALKEY_SSL_ENABLED:false}
      timeout: 10000
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${AZURE_OPENID_CONFIG_ISSUER}
          jwk-set-uri: ${AZURE_OPENID_CONFIG_JWKS_URI}
          audiences: ${AZURE_APP_CLIENT_ID}
      client:
        registration:
          syfohelsenettproxy-m2m:
            authorization-grant-type: client_credentials
            client-authentication-method: client_secret_basic
            client-id: ${azure.app.client.id}
            client-secret: ${azure.app.client.secret}
            provider: aad
            scope:
              - ${syfohelsenettproxy.scope}

          pdlcache-m2m:
            authorization-grant-type: client_credentials
            client-authentication-method: client_secret_basic
            client-id: ${azure.app.client.id}
            client-secret: ${azure.app.client.secret}
            provider: aad
            scope:
              - ${tsmpdl.scope}
        provider:
          aad:
            issuer-uri: ${azure.openid.config.issuer}
  kafka:
    bootstrap-servers: ${KAFKA_BROKERS}
    security:
      protocol: ${KAFKA_SECURITY_PROTOCOL:SSL}
    ssl:
      trust-store-location: ${KAFKA_TRUSTSTORE_PATH}
      trust-store-type: JKS
      trust-store-password: ${KAFKA_CREDSTORE_PASSWORD}
      key-store-location: ${KAFKA_KEYSTORE_PATH}
      key-store-type: PKCS12
      key-store-password: ${KAFKA_CREDSTORE_PASSWORD}

# MQ Configuration
mq:
  hostname: ${MQ_HOSTNAME}
  port: ${MQ_PORT}
  gateway:
    name: ${MQ_GATEWAY_NAME}
  channel:
    name: ${MQ_CHANNEL_NAME}
  username: ${MQ_USERNAME}
  password: ${MQ_PASSWORD}
  queues:
    infotrygd:
      oppdatering: ${MQ_INFOTRYGD_OPPDATERING_QUEUE_NAME:QA.P_INFOTRYGD_SYKMELDING_INN}
      svar: ${MQ_INFOTRYGD_SVAR_QUEUE_NAME:QA.P414.SYKMELDING_INN_REPLY}
      sporring: ${MQ_INFOTRYGD_SPORRING_QUEUE_NAME:QA.P_INFOTRYGD_SYKMELDING_SPORRING}

# Kafka topics that infotoast uses
kafka:
  topics:
    sykmeldinger-journalpost: tsm.sykmeldinger-journalpost
    oppgave: tsm.oppgave

# spring health checks
management:
  endpoint:
    health.probes.enabled: true
    health.show-details: always
  endpoints.web:
    base-path: "/internal"
    exposure.include: health, prometheus
  health:
    livenessstate.enabled: true
    readinessState.enabled: true

# External services that infotoast interacts with
services:
  teamsykmelding:
    syfohelsenettproxy:
      url: ${SYFOHELSENETTPROXY_URL}
    smtss:
      url: ${SMTSS_URL}
  pdl:
    graphql:
      url: ${PDL_GRAPHQL_PATH}
  norg2:
    url: ${NORG2_URL}

# GCP Storage
gcp:
  bucket:
    name: ${TSM_SYKMELDING_BUCKET}

# Config for Texas
nais:
  token_endpoint: ${NAIS_TOKEN_ENDPOINT}
  cluster: ${NAIS_CLUSTER_NAME}
